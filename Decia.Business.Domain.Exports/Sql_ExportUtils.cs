using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Decia.Business.Common;
using Decia.Business.Common.Modeling;
using Decia.Business.Common.Structure;
using Decia.Business.Common.Time;
using Decia.Business.Domain;
using Decia.Business.Domain.Projects;
using Decia.Business.Domain.Models;

namespace Decia.Business.Domain.Exports
{
    public static class Sql_ExportUtils
    {
        public const string Export_Separator = "__";
        public const string Export_KeyFormat = "__TD1_{1}__TD2_{2}{0}";
        public const string Export_ResultSetValue = "Results";
        public const string Export_TimeDimensionValue = "TD{0}_{1}";
        public const string Export_NullValue = "None";

        public static long GetConciseRevisionNumber(this ModelDataState dataState, RevisionChain revisionChain)
        {
            var reducedRevisionValues = dataState.DomainModel.Revisions().ReadReducedRevisionsForProjectId(revisionChain.ProjectGuid, AutoGeneratedRevisionType.ComputationRevision);
            var desiredReducedRevionValue = reducedRevisionValues.Where(x => x.RevisionNumber == revisionChain.DesiredRevisionNumber).FirstOrDefault();
            if (desiredReducedRevionValue == null)
            {
                foreach (var reducedRevisionValue in reducedRevisionValues.OrderBy(x => x.RevisionNumber))
                {
                    if (reducedRevisionValue.RevisionNumber > revisionChain.DesiredRevisionNumber)
                    { break; }
                    desiredReducedRevionValue = reducedRevisionValue;
                }
            }
            var reducedRevisionNumber = desiredReducedRevionValue.RevisionNumber_Reduced;
            return reducedRevisionNumber;
        }

        public static string GenerateExportKey(this TimePeriodType? primaryTimePeriodType, TimePeriodType? secondaryTimePeriodType, bool isComputed)
        {
            var keyValue = string.Empty;

            if (primaryTimePeriodType.HasValue)
            { keyValue += (Export_Separator + string.Format(Export_TimeDimensionValue, 1, primaryTimePeriodType.ToString())); }

            if (secondaryTimePeriodType.HasValue)
            { keyValue += (Export_Separator + string.Format(Export_TimeDimensionValue, 2, secondaryTimePeriodType.ToString())); }

            if (isComputed)
            { keyValue += (Export_Separator + Export_ResultSetValue); }

            return keyValue;
        }

        public static int GetDistanceFromGlobal(this IStructuralMap structuralMap, ModelObjectReference structuralTypeRef, bool useExtendedStructure)
        {
            if (structuralTypeRef.ModelObjectType == ModelObjectType.GlobalType)
            { return 0; }
            else if (structuralTypeRef.ModelObjectType == ModelObjectType.EntityType)
            {
                var ancestorDistances = (IDictionary<ModelObjectReference, int>)null;

                if (!useExtendedStructure)
                { ancestorDistances = structuralMap.EntityTypeTree.GetAncestorsWithDistances(structuralTypeRef); }
                else
                { ancestorDistances = structuralMap.EntityTypeExtendedNetwork.GetAncestorsWithDistances(structuralTypeRef); }

                if (ancestorDistances.Count < 1)
                { return 1; }
                return (ancestorDistances.Values.Max() + 1);
            }
            else if (structuralTypeRef.ModelObjectType == ModelObjectType.RelationType)
            {
                var structuralSpace = structuralMap.GetStructuralSpace(structuralTypeRef, useExtendedStructure);
                var relatedEntityTypeRefs = structuralSpace.Dimensions.Select(x => x.EntityTypeRef).Distinct().ToList();

                if (relatedEntityTypeRefs.Count < 1)
                { return GetDistanceFromGlobal(structuralMap, ModelObjectReference.GlobalTypeReference, useExtendedStructure); }

                var maxDistance = relatedEntityTypeRefs.Select(x => GetDistanceFromGlobal(structuralMap, x, useExtendedStructure)).Max();
                return maxDistance;
            }
            else
            { throw new InvalidOperationException("The specified ModelObjectType is not valid."); }
        }

        public static bool IsVariableTemplateJoinable(this VariableTemplate variableTemplate)
        {
            if (variableTemplate.PredefinedVariableTemplateOption == PredefinedVariableTemplateOption.Id)
            { return (variableTemplate.Containing_StructuralTypeId.ModelObjectType == ModelObjectType.EntityType); }
            if (variableTemplate.PredefinedVariableTemplateOption == PredefinedVariableTemplateOption.Id_Parent)
            { return true; }
            if (variableTemplate.PredefinedVariableTemplateOption == PredefinedVariableTemplateOption.Id_Related)
            { return true; }
            if (variableTemplate.IsNavigationVariable)
            { return true; }
            return false;
        }

        public static bool IsVariableTemplateJoinableAndNullable(this VariableTemplate variableTemplate)
        {
            if (variableTemplate.PredefinedVariableTemplateOption == PredefinedVariableTemplateOption.Id_Parent)
            { return true; }
            if (variableTemplate.IsNavigationVariable)
            { return true; }
            return false;
        }

        public static ModelObjectReference? GetVariableTemplate_JoinableEntityTypeRef(this VariableTemplate variableTemplate)
        {
            if (variableTemplate.PredefinedVariableTemplateOption == PredefinedVariableTemplateOption.Id)
            {
                if (variableTemplate.Containing_StructuralTypeId.ModelObjectType != ModelObjectType.EntityType)
                { return null; }
                return variableTemplate.Containing_StructuralTypeId.ModelObjectRef;
            }
            if (variableTemplate.PredefinedVariableTemplateOption == PredefinedVariableTemplateOption.Id_Parent)
            { return variableTemplate.RelatedEntityTypeRef; }
            if (variableTemplate.PredefinedVariableTemplateOption == PredefinedVariableTemplateOption.Id_Related)
            { return variableTemplate.RelatedEntityTypeRef; }
            if (variableTemplate.IsNavigationVariable)
            { return variableTemplate.RelatedEntityTypeRef; }
            return null;
        }
    }
}